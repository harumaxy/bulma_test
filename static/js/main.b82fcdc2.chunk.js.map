{"version":3,"sources":["serviceWorker.ts","Components/MyTab.tsx","Components/MyPanel.tsx","Components/MyProgress.tsx","Components/MyTable.tsx","Components/MyTag.tsx","Components/MyTile.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","MyTab","props","useState","name","href","isActive","tabs","setTabs","Tabs","isBoxed","isToggle","TabList","map","tab","i","Tab","onClick","newTabs","handleClick","TabLink","MyPanel","Panel","PanelHeading","PanelBlock","Control","hasIcons","Input","isSize","placeholder","Icon","isAlign","className","aria-hidden","PanelTabs","PanelTab","PanelIcon","tag","Checkbox","Button","isOutlined","isColor","MyProgress","time","setTime","setTimeout","Content","Progress","max","value","MyTable","Table","isNarrow","isBordered","words","MyTag","word","Tag","Delete","MyTile","Tile","isAncestor","isParent","Container","Notification","isVertical","isChild","ReactDOM","render","Title","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b82fcdc2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState } from 'react'\nimport { Column } from 'bloomer/lib/grid/Column'\nimport { Title } from 'bloomer/lib/elements/Title'\nimport { Tile, Box } from 'bloomer'\nimport { Tabs } from 'bloomer/lib/components/Tabs/Tabs'\nimport { TabList } from 'bloomer/lib/components/Tabs/TabList'\nimport { Tab } from 'bloomer/lib/components/Tabs/Tab'\nimport { TabLink } from 'bloomer/lib/components/Tabs/TabLink'\n\nconst MyTab: React.FC = (props: any) => {\n  const [tabs, setTabs] = useState([\n    { name: 'Pictures', href: '#', isActive: false },\n    { name: 'Music', href: '#', isActive: true },\n    { name: 'Video', href: '#', isActive: false },\n    { name: 'Document', href: '#', isActive: false }\n  ])\n\n  const handleClick = (i: number) => {\n    let newTabs = tabs.map(tab => ({\n      ...tab,\n      isActive: false\n    }))\n    newTabs[i].isActive = true\n    setTabs(newTabs)\n  }\n\n  return (\n    <Tabs isBoxed isToggle>\n      <TabList>\n        {tabs.map((tab, i) => (\n          <Tab\n            isActive={tab.isActive}\n            onClick={() => {\n              handleClick(i)\n            }}\n          >\n            <TabLink>\n              <span>{tab.name}</span>\n            </TabLink>\n          </Tab>\n        ))}\n      </TabList>\n    </Tabs>\n  )\n}\n\nexport default MyTab\n","import React from 'react'\nimport { Panel } from 'bloomer/lib/components/Panel/Panel'\nimport { PanelHeading } from 'bloomer/lib/components/Panel/PanelHeading'\nimport { PanelBlock } from 'bloomer/lib/components/Panel/PanelBlock'\nimport { Control } from 'bloomer/lib/elements/Form/Control'\nimport { Input } from 'bloomer/lib/elements/Form/Input'\nimport { Icon } from 'bloomer/lib/elements/Icon'\nimport { PanelTabs } from 'bloomer/lib/components/Panel/PanelTabs'\nimport { PanelTab } from 'bloomer/lib/components/Panel/PanelTab'\nimport { PanelIcon } from 'bloomer/lib/components/Panel/PanelIcon'\nimport { Checkbox } from 'bloomer/lib/elements/Form/Checkbox'\nimport { Button } from 'bloomer/lib/elements/Button'\n\nconst MyPanel = () => {\n  return (\n    <Panel>\n      <PanelHeading>Repositories</PanelHeading>\n      <PanelBlock>\n        <Control hasIcons=\"left\">\n          <Input isSize=\"small\" placeholder=\"Search\" />\n          <Icon isSize=\"small\" isAlign=\"left\">\n            <span className=\"fa fa-search\" aria-hidden=\"true\" />\n          </Icon>\n        </Control>\n      </PanelBlock>\n      <PanelTabs>\n        <PanelTab isActive>All</PanelTab>\n        <PanelTab>Public</PanelTab>\n        <PanelTab>Private</PanelTab>\n        <PanelTab>Sources</PanelTab>\n        <PanelTab>Fork</PanelTab>\n      </PanelTabs>\n      <PanelBlock isActive>\n        <PanelIcon className=\"fa fa-book\" />\n        Bloomer\n      </PanelBlock>\n      <PanelBlock>\n        <PanelIcon className=\"fa fa-code-fork\" />\n        RxJS\n      </PanelBlock>\n      <PanelBlock>\n        <PanelIcon className=\"fa fa-code-fork\" />\n        Webpack\n      </PanelBlock>\n      <PanelBlock>\n        <PanelIcon className=\"fa fa-code-fork\" />\n        Typescript\n      </PanelBlock>\n      <PanelBlock tag=\"label\">\n        <Checkbox> Remember me</Checkbox>\n      </PanelBlock>\n      <PanelBlock>\n        <Button isOutlined isColor=\"primary\">\n          Reset all filters\n        </Button>\n      </PanelBlock>\n    </Panel>\n  )\n}\n\nexport default MyPanel\n","import React, { useState } from 'react'\nimport { Progress } from 'bloomer/lib/elements/Progress'\nimport { Content } from 'bloomer/lib/elements/Content'\n\nconst MyProgress = () => {\n  const [time, setTime] = useState(0)\n  setTimeout(() => {\n    setTime(time + 10)\n  }, 10)\n  return (\n    <Content>\n      <Progress isColor=\"info\" />\n      <Progress isColor=\"primary\" />\n      <Progress isColor=\"secondary\" />\n      <span>Small : Success</span>\n      <Progress\n        isSize=\"small\"\n        isColor=\"success\"\n        max={1000}\n        value={time % 1000}\n      />\n      <span>Medium : Warning</span>\n      <Progress\n        isSize=\"medium\"\n        isColor=\"warning\"\n        max={10000}\n        value={time % 10000}\n      />\n      <span>Large : Danger</span>\n      <Progress\n        isSize=\"large\"\n        isColor=\"danger\"\n        max={100000}\n        value={time % 100000}\n      />\n    </Content>\n  )\n}\n\nexport default MyProgress\n","import React from 'react'\nimport { Table } from 'bloomer/lib/elements/Table'\n\nconst MyTable = () => {\n  return (\n    <Table isNarrow isBordered>\n      <thead>\n        <tr>\n          <th>素の</th>\n          <th>HTMLで</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>表を</td>\n          <td>書くのは</td>\n        </tr>\n        <tr className=\"is-selected\">\n          <td>正直</td>\n          <td>辛いと</td>\n        </tr>\n        <tr>\n          <td>思い</td>\n          <td>ます</td>\n        </tr>\n      </tbody>\n    </Table>\n  )\n}\n\nexport default MyTable\n","import React from 'react'\n\nimport { Tag } from 'bloomer/lib/elements/Tag'\nimport { Delete } from 'bloomer/lib/elements/Delete'\n\nconst words = ['react', 'typescript', 'webpack', 'bulma', 'bloomer', 'gatsby']\n\nconst MyTag = () => {\n  return (\n    <>\n      {words.map(word => (\n        <Tag isColor=\"light\">\n          <a>{word}</a>\n        </Tag>\n      ))}\n      <Tag isSize=\"medium\">\n        <span>MidiumTag</span> <Delete />\n      </Tag>\n      <Tag isSize=\"large\">\n        <span>BigTag</span> <Delete />\n      </Tag>\n    </>\n  )\n}\n\nexport default MyTag\n","import React from 'react'\nimport { Tile } from 'bloomer/lib/grid/Tile'\nimport { Box } from 'bloomer/lib/elements/Box'\nimport { Container } from 'bloomer/lib/layout/Container'\nimport { Notification } from 'bloomer/lib/elements/Notification'\n\nconst MyTile = () => {\n  return (\n    <Tile isAncestor>\n      <Tile isParent isSize={4}>\n        <Container>\n          <Notification isColor=\"warning\">warning</Notification>\n        </Container>\n      </Tile>\n      <Tile isParent isVertical isChild isSize={8}>\n        <Tile isChild>\n          <Notification isColor=\"success\">success</Notification>\n        </Tile>\n        <Tile isChild>\n          <Notification isColor=\"danger\">danger</Notification>\n        </Tile>\n      </Tile>\n    </Tile>\n  )\n}\n\nexport default MyTile\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bulma'\n// fontawesome 読み込み\nimport '@fortawesome/fontawesome-free/js/fontawesome'\nimport '@fortawesome/fontawesome-free/js/solid'\nimport '@fortawesome/fontawesome-free/js/regular'\nimport '@fortawesome/fontawesome-free/js/v4-shims'\n\nimport MyTab from './Components/MyTab'\nimport MyPanel from './Components/MyPanel'\nimport { Container } from 'bloomer/lib/layout/Container'\nimport { Delete } from 'bloomer/lib/elements/Delete'\nimport MyProgress from './Components/MyProgress'\nimport MyTable from './Components/MyTable'\nimport MyTag from './Components/MyTag'\nimport { Title } from 'bloomer/lib/elements/Title'\nimport MyTile from './Components/MyTile'\n\nReactDOM.render(\n  <>\n    <Title isSize={1}>Tab</Title>\n    <MyTab />\n    <Title isSize={1}>Panel</Title>\n    <MyPanel />\n    <Title isSize={1}>Progress</Title>\n    <MyProgress />\n    <Title isSize={1}>Table</Title>\n    <MyTable />\n    <Title isSize={1}>Tag</Title>\n    <MyTag />\n    <Title isSize={1}>Tile</Title>\n    <MyTile />\n  </>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}